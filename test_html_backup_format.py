#!/usr/bin/env python3
"""
Test script to verify that HTML generator produces backup-format HTML exactly
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from html_generator import EnhancedHTMLGenerator

def test_backup_format():
    """Test that HTML generator produces backup format"""
    
    # Create test data
    insights = [
        "🔴 Critical vendor pricing changes detected in Microsoft Azure services",
        "🟡 Dell hardware pricing showing moderate fluctuations", 
        "🟢 General market stability observed in networking equipment"
    ]
    
    all_content = [
        {
            'title': 'Test Reddit Post About Pricing',
            'url': 'https://reddit.com/r/sysadmin/test',
            'source': 'reddit',
            'created_at': '2025-07-16',
            'content': 'Test content discussing Dell pricing and Microsoft licensing costs.'
        },
        {
            'title': 'Google Search Result on Vendor Analysis', 
            'url': 'https://example.com/vendor-analysis',
            'source': 'google',
            'created_at': '2025-07-16',
            'content': 'Analysis of enterprise vendor pricing trends.'
        }
    ]
    
    vendor_analysis = {
        'top_vendors': [('microsoft', 2), ('dell', 1)]
    }
    
    config = {
        'system': {'name': 'ULTRATHINK-AI-PRO', 'version': '3.1.0'}
    }
    
    # Generate HTML
    generator = EnhancedHTMLGenerator(debug=True)
    html = generator.generate_html_report(
        insights=insights,
        all_content=all_content,
        vendor_analysis=vendor_analysis,
        config=config
    )
    
    # Save test output
    output_file = generator.save_html_report(html, "output")
    
    # Verify key elements of backup format
    checks = [
        # Structure checks
        ('<main class="email-preview"', 'Email preview wrapper'),
        ('<header class="email-header"', 'Email header section'),
        ('<div class="email-content"', 'Email content section'),
        ('🧠 ULTRATHINK-AI-PRO', 'System title with emoji'),
        ('Enhanced Pricing Intelligence Report', 'Report subtitle'),
        
        # Insights pagination checks
        ('📋 Executive Summary', 'Executive summary section'),
        ('💡 Strategic Intelligence Insights', 'Strategic insights section'),
        ('<button onclick="showInsightsPage(1)"', 'Priority Alpha button'),
        ('<button onclick="showInsightsPage(2)"', 'Priority Beta button'),
        ('<button onclick="showInsightsPage(3)"', 'Priority Gamma button'),
        ('class="insights-page active"', 'Active insights page'),
        
        # Vendor section checks
        ('🏢 Market Vendor Analysis', 'Vendor analysis section'),
        ('microsoft (2 mentions)', 'Microsoft vendor badge'),
        
        # Sources section checks
        ('📄 Content Sources Analyzed', 'Sources section title'),
        ('📂 Expand All Sources', 'Expand all button'),
        ('📁 Collapse All Sources', 'Collapse all button'),
        ('onclick=\'toggleProvider("reddit")', 'Reddit toggle function'),
        ('class=\'provider-section provider-reddit\'', 'Reddit provider section'),
        
        # JavaScript checks
        ('function toggleProvider(providerId)', 'Toggle provider function'),
        ('function showInsightsPage(pageNum)', 'Show insights page function'),
        ('function showAllProviders()', 'Show all providers function'),
        
        # CSS checks
        ('href="../static/css/report.css"', 'External CSS link'),
        ('.email-preview {', 'Email preview CSS'),
        ('.provider-header {', 'Provider header CSS'),
        ('.insights-pagination {', 'Insights pagination CSS'),
        
        # Footer checks
        ('📊 Report generated by ULTRATHINK-AI-PRO v3.1.0 Hybrid System', 'Footer text'),
        ('⚡ Enhanced with ultrathink-enhanced architecture', 'Enhanced text')
    ]
    
    passed = 0
    failed = 0
    
    print(f"🧪 Testing HTML Generator Backup Format Compatibility")
    print(f"📄 Generated HTML file: {output_file}")
    print(f"📏 HTML length: {len(html):,} characters")
    print()
    
    for check, description in checks:
        if check in html:
            print(f"✅ {description}")
            passed += 1
        else:
            print(f"❌ {description} - Missing: {check}")
            failed += 1
    
    print()
    print(f"📊 Results: {passed} passed, {failed} failed")
    
    if failed == 0:
        print("🎉 SUCCESS: HTML generator perfectly matches backup format!")
        return True
    else:
        print(f"⚠️  ISSUES: {failed} format differences detected")
        return False

if __name__ == "__main__":
    success = test_backup_format()
    sys.exit(0 if success else 1)